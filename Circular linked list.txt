#include <stdio.h>
#include <stdlib.h>

struct Node {
	int data;
	struct Node *next;
};

struct Node *head = NULL;

struct Node* InsertAtHead(int data, struct Node *head) {
	struct Node *current = head;
	struct Node *newNode = malloc(sizeof(struct Node*));
	newNode->data = data;
	newNode->next = newNode;

	if (head == NULL) {
		head = newNode;
	} else {
		while (current->next != head)
			current = current->next;
		newNode->next = head;
		current->next = newNode;
		head = newNode;
	}
	printf("\nElement %d Inserted At Head!", data);
	return head;
}

struct Node* InsertAtNth(int data, struct Node *head, int n) {
	struct Node *current = head, *temp = head;
	struct Node *newNode = malloc(sizeof(struct Node*));
	newNode->data = data;
	newNode->next = newNode;

	int length = 0;
	do {
		++length;
		current = current->next;
	} while (current != head);

	current = head;
	if (n > length + 1) {
		printf(
				"\nInsert %dth Element : Length of Circular linked list is smaller than Nth!!",
				n);
	} else if (n == 0) {
		do {
			current = current->next;
		} while (current->next != head);

		newNode->next = temp;
		head = newNode;
		current->next = head;
		printf("\nElement %d Inserted At : %dth", newNode->data, n);
	} else {
		for (int var = 1; var < n; ++var) {
			temp = current;
			current = current->next;
		}
		newNode->next = temp->next;
		temp->next = newNode;
		printf("\nElement %d Inserted At : %dth", newNode->data, n);
	}

	return head;
}

struct Node* InsertAtEnd(int data, struct Node *head) {
	struct Node *current = head;
	struct Node *newNode = malloc(sizeof(struct Node*));
	newNode->data = data;
	newNode->next = newNode;

	if (head == NULL) {
		head = newNode;
	} else {
		while (current->next != head)
			current = current->next;
		newNode->next = head;
		current->next = newNode;
	}
	printf("\nElement %d Inserted At Tail!", data);
	return head;
}

struct Node* DeleteAtHead(struct Node *head) {
	struct Node *temp = head, *current = head;
	if (head == NULL) {
		printf("\nEmpty list!!");
		return head;
	}

	while (current->next != head)
		current = current->next;
	current->next = head = temp->next;
	printf("\nElement %d Deleted At Head!!", temp->data);
	free(temp);
	return head;
}

struct Node* DeleteAtNth(struct Node *head, int n) {
	struct Node *temp = head, *current = head;
	int length = 0;
	do {
		++length;
		current = current->next;
	} while (current != head);

	current = head;
	if (length < n) {
		printf(
				"\nDelete %dth Element : Length of Circular linked list is smaller than Nth!!",
				n);
	} else if (n == 0) {
		while (current->next != head)
			current = current->next;
		head = current->next = temp->next;
		printf("\nElement %d Deleted At : %dth", temp->data, n);
		free(temp);
	} else {
		for (int var = 1; var < n; ++var) {
			temp = current;
			current = current->next;
		}
		temp->next = current->next;
		printf("\nElement %d Deleted At : %dth", current->data, n);
		free(current);
	}
	return head;
}

struct Node* DeleteAtTail(struct Node *head) {
	struct Node *temp = head, *current = head;
	if (head == NULL) {
		printf("\nEmpty list!!");
		return head;
	}

	while (current->next != head) {
		temp = current;
		current = current->next;
	}

	temp->next = current->next;
	printf("\nElement %d Deleted At Tail!!", temp->data);
	free(current);
	return head;
}

void Print(struct Node *head) {
	struct Node *current = head;
	printf("\nCircular linked list :");
	if (current == NULL) {
		return;
	} else {
		do {
			printf(" %d", current->data);
			current = current->next;
		} while (current != head);
	}
}

int main() {
	printf("Circular Linked List :");
	head = InsertAtHead(2, head);
	head = InsertAtEnd(5, head);
	head = InsertAtHead(1, head);
	head = InsertAtEnd(7, head);
	Print(head);
	head = DeleteAtHead(head);
	Print(head);
	return 0;
}

